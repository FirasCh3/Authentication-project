{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http\";\nexport class AppComponent {\n  constructor(Request) {\n    this.Request = Request;\n    this.group = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email], this.restricted.bind(this)),\n      password: new FormControl(null, [Validators.required, Validators.minLength(8)])\n    });\n  }\n  UserDoesNotExist(UserData, UserInput) {\n    let UserExists = false;\n    let i = 0;\n    while (i < UserData.length && UserExists == false) {\n      if (UserInput == UserData[i].email) {\n        UserExists = true;\n      } else {\n        i++;\n      }\n    }\n    return UserExists;\n  }\n  restricted(control) {\n    let UserData;\n    this.Request.GetAllUsers().subscribe(data => {\n      UserData = data;\n    });\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let UserInput = control.value;\n        if (this.UserDoesNotExist(UserData, UserInput) == false) {\n          resolve({\n            error: false\n          });\n        } else {\n          resolve(null);\n        }\n      }, 1000);\n    });\n    return promise;\n  }\n  submit() {\n    console.log(this.group);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.httpRequests));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 0,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {},\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","AppComponent","constructor","Request","group","email","required","restricted","bind","password","minLength","UserDoesNotExist","UserData","UserInput","UserExists","i","length","control","GetAllUsers","subscribe","data","promise","Promise","resolve","reject","setTimeout","value","error","submit","console","log","i0","ɵɵdirectiveInject","i1","httpRequests","selectors","decls","vars","template","AppComponent_Template","rf","ctx","styles"],"sources":["C:\\Users\\user\\Desktop\\SpringBootProject\\src\\main\\resources\\my-app\\src\\app\\app.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Observable} from \"rxjs\";\nimport {httpRequests} from \"./http\";\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent{\n  constructor(private Request:httpRequests) {\n  }\n  group=new FormGroup({\n    email:new FormControl(null,[Validators.required,Validators.email],this.restricted.bind(this)),\n    password:new FormControl(null,[Validators.required,Validators.minLength(8)])\n  });\n  UserDoesNotExist(UserData:any,UserInput:any):Boolean{\n      let UserExists:Boolean=false;\n      let i=0;\n      while(i < UserData.length && UserExists == false){\n        if(UserInput==UserData[i].email){\n          UserExists=true;\n        }else{\n          i++;\n        }\n      }\n\n      return UserExists;\n  }\n  restricted(control:AbstractControl):Promise<any>|Observable<any>{\n      let UserData:any;\n      this.Request.GetAllUsers().subscribe((data)=>{\n         UserData=data;\n\n      })\n      let promise = new Promise((resolve, reject) => {\n\n      setTimeout(() => {\n          let UserInput = control.value;\n          if(this.UserDoesNotExist(UserData,UserInput)==false){\n            resolve({error:false})\n          }else{\n            resolve(null);\n          }\n\n\n\n      }, 1000)\n    });\n    return promise;\n  }\n  submit(){\n    console.log(this.group)\n  }\n}\n"],"mappings":"AACA,SAAyBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;;;AASlF,OAAM,MAAOC,YAAY;EACvBC,YAAoBC,OAAoB;IAApB,KAAAA,OAAO,GAAPA,OAAO;IAE3B,KAAAC,KAAK,GAAC,IAAIL,SAAS,CAAC;MAClBM,KAAK,EAAC,IAAIP,WAAW,CAAC,IAAI,EAAC,CAACE,UAAU,CAACM,QAAQ,EAACN,UAAU,CAACK,KAAK,CAAC,EAAC,IAAI,CAACE,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;MAC7FC,QAAQ,EAAC,IAAIX,WAAW,CAAC,IAAI,EAAC,CAACE,UAAU,CAACM,QAAQ,EAACN,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC;KAC5E,CAAC;EAJF;EAKAC,gBAAgBA,CAACC,QAAY,EAACC,SAAa;IACvC,IAAIC,UAAU,GAAS,KAAK;IAC5B,IAAIC,CAAC,GAAC,CAAC;IACP,OAAMA,CAAC,GAAGH,QAAQ,CAACI,MAAM,IAAIF,UAAU,IAAI,KAAK,EAAC;MAC/C,IAAGD,SAAS,IAAED,QAAQ,CAACG,CAAC,CAAC,CAACV,KAAK,EAAC;QAC9BS,UAAU,GAAC,IAAI;OAChB,MAAI;QACHC,CAAC,EAAE;;;IAIP,OAAOD,UAAU;EACrB;EACAP,UAAUA,CAACU,OAAuB;IAC9B,IAAIL,QAAY;IAChB,IAAI,CAACT,OAAO,CAACe,WAAW,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAG;MAC1CR,QAAQ,GAACQ,IAAI;IAEhB,CAAC,CAAC;IACF,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAE9CC,UAAU,CAAC,MAAK;QACZ,IAAIZ,SAAS,GAAGI,OAAO,CAACS,KAAK;QAC7B,IAAG,IAAI,CAACf,gBAAgB,CAACC,QAAQ,EAACC,SAAS,CAAC,IAAE,KAAK,EAAC;UAClDU,OAAO,CAAC;YAACI,KAAK,EAAC;UAAK,CAAC,CAAC;SACvB,MAAI;UACHJ,OAAO,CAAC,IAAI,CAAC;;MAKnB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;IACF,OAAOF,OAAO;EAChB;EACAO,MAAMA,CAAA;IACJC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1B,KAAK,CAAC;EACzB;;AA5CWH,YAAY,C;mBAAZA,YAAY,EAAA8B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA;AAAA;AAAZjC,YAAY,C;QAAZA,YAAY;EAAAkC,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;EAAAC,MAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}