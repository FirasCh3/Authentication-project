{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nexport let SignupComponent = class SignupComponent {\n  constructor() {\n    this.group = new FormGroup({\n      name: new FormControl(undefined, [Validators.required]),\n      email: new FormControl(undefined, [Validators.required, Validators.email]),\n      password: new FormControl(undefined, Validators.required),\n      passwordconfirm: new FormControl(undefined, [Validators.required], this.CheckPassword.bind(this))\n    });\n  }\n  CheckPassword(control) {\n    let promise = new Promise((resolve, reject) => {\n      let password = this.group.controls.password.value;\n      if (password != control.value) {\n        resolve({\n          PassError: \"invalid\"\n        });\n      }\n    });\n    return promise;\n  }\n  submit() {\n    console.log(this.group);\n  }\n};\nSignupComponent = __decorate([Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})], SignupComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","SignupComponent","constructor","group","name","undefined","required","email","password","passwordconfirm","CheckPassword","bind","control","promise","Promise","resolve","reject","controls","value","PassError","submit","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\user\\Desktop\\SpringBootProject\\src\\main\\resources\\my-app\\src\\app\\signup\\signup.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent {\n  group=new FormGroup({\n    name:new FormControl(undefined,[Validators.required]),\n    email:new FormControl(undefined,[Validators.required,Validators.email]),\n    password:new FormControl(undefined,Validators.required),\n    passwordconfirm:new FormControl(undefined,[Validators.required],this.CheckPassword.bind(this))\n  })\n  CheckPassword(control:AbstractControl):Promise<any>|Observable<any>{\n    let promise=new Promise((resolve,reject)=>{\n      let password=this.group.controls.password.value;\n      if(password!=control.value){\n        resolve({PassError:\"invalid\"});\n      }\n\n    })\n    return promise;\n  }\n  submit(){\n    console.log(this.group)\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAyBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAQ3E,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAArBC,YAAA;IACL,KAAAC,KAAK,GAAC,IAAIJ,SAAS,CAAC;MAClBK,IAAI,EAAC,IAAIN,WAAW,CAACO,SAAS,EAAC,CAACL,UAAU,CAACM,QAAQ,CAAC,CAAC;MACrDC,KAAK,EAAC,IAAIT,WAAW,CAACO,SAAS,EAAC,CAACL,UAAU,CAACM,QAAQ,EAACN,UAAU,CAACO,KAAK,CAAC,CAAC;MACvEC,QAAQ,EAAC,IAAIV,WAAW,CAACO,SAAS,EAACL,UAAU,CAACM,QAAQ,CAAC;MACvDG,eAAe,EAAC,IAAIX,WAAW,CAACO,SAAS,EAAC,CAACL,UAAU,CAACM,QAAQ,CAAC,EAAC,IAAI,CAACI,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;KAC9F,CAAC;EAcJ;EAbED,aAAaA,CAACE,OAAuB;IACnC,IAAIC,OAAO,GAAC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAACC,MAAM,KAAG;MACxC,IAAIR,QAAQ,GAAC,IAAI,CAACL,KAAK,CAACc,QAAQ,CAACT,QAAQ,CAACU,KAAK;MAC/C,IAAGV,QAAQ,IAAEI,OAAO,CAACM,KAAK,EAAC;QACzBH,OAAO,CAAC;UAACI,SAAS,EAAC;QAAS,CAAC,CAAC;;IAGlC,CAAC,CAAC;IACF,OAAON,OAAO;EAChB;EACAO,MAAMA,CAAA;IACJC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACnB,KAAK,CAAC;EACzB;CACD;AApBYF,eAAe,GAAAsB,UAAA,EAL3B1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWzB,eAAe,CAoB3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}