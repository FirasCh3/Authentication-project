{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nexport let AppComponent = class AppComponent {\n  ngOnInit() {\n    this.Request.getRequest().subscribe(data => {\n      this.emails = data;\n    });\n  }\n  constructor(Request, emails) {\n    this.Request = Request;\n    this.emails = emails;\n    this.group = new FormGroup({\n      email: new FormControl(null, [], this.restricted),\n      password: new FormControl(null, [Validators.required])\n    });\n  }\n  restricted(control) {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let email = control.value;\n        for (let i = 0; i < this.emails.length; i++) {\n          console.log(this.emails[i]);\n        }\n      }, 2000);\n    });\n    return promise;\n  }\n  submit() {\n    console.log(this.group);\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","AppComponent","ngOnInit","Request","getRequest","subscribe","data","emails","constructor","group","email","restricted","password","required","control","promise","Promise","resolve","reject","setTimeout","value","i","length","console","log","submit","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\SBS\\Desktop\\SpringBootProject\\src\\main\\resources\\my-app\\src\\app\\app.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Observable} from \"rxjs\";\nimport {httpRequests} from \"./http\";\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit{\n\n  ngOnInit() {\n    this.Request.getRequest().subscribe((data)=>{\n      this.emails=data;\n    })\n  }\n\n  constructor(private Request:httpRequests,private emails:any) {\n  }\n  group=new FormGroup({\n    email:new FormControl(null,[],this.restricted),\n    password:new FormControl(null,[Validators.required])\n  });\n  restricted(control:AbstractControl):Promise<any>|Observable<any>{\n      let promise = new Promise((resolve, reject) => {\n\n      setTimeout(() => {\n        let email = control.value;\n        for(let i=0;i<this.emails.length;i++){\n          console.log(this.emails[i]);\n        }\n\n      }, 2000)\n    });\n    return promise;\n  }\n  submit(){\n    console.log(this.group)\n  }\n}\n"],"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAC/C,SAAyBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAS3E,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAEvBC,QAAQA,CAAA;IACN,IAAI,CAACC,OAAO,CAACC,UAAU,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAG;MAC1C,IAAI,CAACC,MAAM,GAACD,IAAI;IAClB,CAAC,CAAC;EACJ;EAEAE,YAAoBL,OAAoB,EAASI,MAAU;IAAvC,KAAAJ,OAAO,GAAPA,OAAO;IAAsB,KAAAI,MAAM,GAANA,MAAM;IAEvD,KAAAE,KAAK,GAAC,IAAIV,SAAS,CAAC;MAClBW,KAAK,EAAC,IAAIZ,WAAW,CAAC,IAAI,EAAC,EAAE,EAAC,IAAI,CAACa,UAAU,CAAC;MAC9CC,QAAQ,EAAC,IAAId,WAAW,CAAC,IAAI,EAAC,CAACE,UAAU,CAACa,QAAQ,CAAC;KACpD,CAAC;EAJF;EAKAF,UAAUA,CAACG,OAAuB;IAC9B,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAE9CC,UAAU,CAAC,MAAK;QACd,IAAIT,KAAK,GAAGI,OAAO,CAACM,KAAK;QACzB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,IAAI,CAACd,MAAM,CAACe,MAAM,EAACD,CAAC,EAAE,EAAC;UACnCE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,MAAM,CAACc,CAAC,CAAC,CAAC;;MAG/B,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;IACF,OAAON,OAAO;EAChB;EACAU,MAAMA,CAAA;IACJF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,KAAK,CAAC;EACzB;CACD;AA9BYR,YAAY,GAAAyB,UAAA,EANxB7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EAEW5B,YAAY,CA8BxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}