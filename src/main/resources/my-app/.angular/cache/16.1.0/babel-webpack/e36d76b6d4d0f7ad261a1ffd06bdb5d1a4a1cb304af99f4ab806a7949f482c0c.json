{"ast":null,"code":"import { createRequire as __cjsCompatRequire } from 'module';\nconst require = __cjsCompatRequire(import.meta.url);\nimport { TypeScriptReflectionHost } from \"./chunk-OIJPCKRW.js\";\nimport { isAliasImportDeclaration, loadIsReferencedAliasDeclarationPatch } from \"./chunk-KPIJL3UY.js\";\n\n// bazel-out/darwin_arm64-fastbuild/bin/packages/compiler-cli/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.mjs\nimport ts from \"typescript\";\nfunction isAngularDecorator(decorator, isCore) {\n  return isCore || decorator.import !== null && decorator.import.from === \"@angular/core\";\n}\nvar DECORATOR_INVOCATION_JSDOC_TYPE = \"!Array<{type: !Function, args: (undefined|!Array<?>)}>\";\nfunction extractMetadataFromSingleDecorator(decorator, diagnostics) {\n  const metadataProperties = [];\n  const expr = decorator.expression;\n  switch (expr.kind) {\n    case ts.SyntaxKind.Identifier:\n      metadataProperties.push(ts.factory.createPropertyAssignment(\"type\", expr));\n      break;\n    case ts.SyntaxKind.CallExpression:\n      const call = expr;\n      metadataProperties.push(ts.factory.createPropertyAssignment(\"type\", call.expression));\n      if (call.arguments.length) {\n        const args = [];\n        for (const arg of call.arguments) {\n          args.push(arg);\n        }\n        const argsArrayLiteral = ts.factory.createArrayLiteralExpression(ts.factory.createNodeArray(args, true));\n        metadataProperties.push(ts.factory.createPropertyAssignment(\"args\", argsArrayLiteral));\n      }\n      break;\n    default:\n      diagnostics.push({\n        file: decorator.getSourceFile(),\n        start: decorator.getStart(),\n        length: decorator.getEnd() - decorator.getStart(),\n        messageText: `${ts.SyntaxKind[decorator.kind]} not implemented in gathering decorator metadata.`,\n        category: ts.DiagnosticCategory.Error,\n        code: 0\n      });\n      break;\n  }\n  return ts.factory.createObjectLiteralExpression(metadataProperties);\n}\nfunction createCtorParametersClassProperty(diagnostics, entityNameToExpression, ctorParameters, isClosureCompilerEnabled) {\n  const params = [];\n  for (const ctorParam of ctorParameters) {\n    if (!ctorParam.type && ctorParam.decorators.length === 0) {\n      params.push(ts.factory.createNull());\n      continue;\n    }\n    const paramType = ctorParam.type ? typeReferenceToExpression(entityNameToExpression, ctorParam.type) : void 0;\n    const members = [ts.factory.createPropertyAssignment(\"type\", paramType || ts.factory.createIdentifier(\"undefined\"))];\n    const decorators = [];\n    for (const deco of ctorParam.decorators) {\n      decorators.push(extractMetadataFromSingleDecorator(deco, diagnostics));\n    }\n    if (decorators.length) {\n      members.push(ts.factory.createPropertyAssignment(\"decorators\", ts.factory.createArrayLiteralExpression(decorators)));\n    }\n    params.push(ts.factory.createObjectLiteralExpression(members));\n  }\n  const initializer = ts.factory.createArrowFunction(void 0, void 0, [], void 0, ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken), ts.factory.createArrayLiteralExpression(params, true));\n  const ctorProp = ts.factory.createPropertyDeclaration([ts.factory.createToken(ts.SyntaxKind.StaticKeyword)], \"ctorParameters\", void 0, void 0, initializer);\n  if (isClosureCompilerEnabled) {\n    ts.setSyntheticLeadingComments(ctorProp, [{\n      kind: ts.SyntaxKind.MultiLineCommentTrivia,\n      text: [`*`, ` * @type {function(): !Array<(null|{`, ` *   type: ?,`, ` *   decorators: (undefined|${DECORATOR_INVOCATION_JSDOC_TYPE}),`, ` * })>}`, ` * @nocollapse`, ` `].join(\"\\n\"),\n      pos: -1,\n      end: -1,\n      hasTrailingNewLine: true\n    }]);\n  }\n  return ctorProp;\n}\nfunction typeReferenceToExpression(entityNameToExpression, node) {\n  let kind = node.kind;\n  if (ts.isLiteralTypeNode(node)) {\n    kind = node.literal.kind;\n  }\n  switch (kind) {\n    case ts.SyntaxKind.FunctionType:\n    case ts.SyntaxKind.ConstructorType:\n      return ts.factory.createIdentifier(\"Function\");\n    case ts.SyntaxKind.ArrayType:\n    case ts.SyntaxKind.TupleType:\n      return ts.factory.createIdentifier(\"Array\");\n    case ts.SyntaxKind.TypePredicate:\n    case ts.SyntaxKind.TrueKeyword:\n    case ts.SyntaxKind.FalseKeyword:\n    case ts.SyntaxKind.BooleanKeyword:\n      return ts.factory.createIdentifier(\"Boolean\");\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.StringKeyword:\n      return ts.factory.createIdentifier(\"String\");\n    case ts.SyntaxKind.ObjectKeyword:\n      return ts.factory.createIdentifier(\"Object\");\n    case ts.SyntaxKind.NumberKeyword:\n    case ts.SyntaxKind.NumericLiteral:\n      return ts.factory.createIdentifier(\"Number\");\n    case ts.SyntaxKind.TypeReference:\n      const typeRef = node;\n      return entityNameToExpression(typeRef.typeName);\n    case ts.SyntaxKind.UnionType:\n      const childTypeNodes = node.types.filter(t => !(ts.isLiteralTypeNode(t) && t.literal.kind === ts.SyntaxKind.NullKeyword));\n      return childTypeNodes.length === 1 ? typeReferenceToExpression(entityNameToExpression, childTypeNodes[0]) : void 0;\n    default:\n      return void 0;\n  }\n}\nfunction symbolIsRuntimeValue(typeChecker, symbol) {\n  if (symbol.flags & ts.SymbolFlags.Alias) {\n    symbol = typeChecker.getAliasedSymbol(symbol);\n  }\n  return (symbol.flags & ts.SymbolFlags.Value & ts.SymbolFlags.ConstEnumExcludes) !== 0;\n}\nfunction getDownlevelDecoratorsTransform(typeChecker, host, diagnostics, isCore, isClosureCompilerEnabled) {\n  function addJSDocTypeAnnotation(node, jsdocType) {\n    if (!isClosureCompilerEnabled) {\n      return;\n    }\n    ts.setSyntheticLeadingComments(node, [{\n      kind: ts.SyntaxKind.MultiLineCommentTrivia,\n      text: `* @type {${jsdocType}} `,\n      pos: -1,\n      end: -1,\n      hasTrailingNewLine: true\n    }]);\n  }\n  function createPropDecoratorsClassProperty(diagnostics2, properties) {\n    const entries = [];\n    for (const [name, decorators] of properties.entries()) {\n      entries.push(ts.factory.createPropertyAssignment(name, ts.factory.createArrayLiteralExpression(decorators.map(deco => extractMetadataFromSingleDecorator(deco, diagnostics2)))));\n    }\n    const initializer = ts.factory.createObjectLiteralExpression(entries, true);\n    const prop = ts.factory.createPropertyDeclaration([ts.factory.createToken(ts.SyntaxKind.StaticKeyword)], \"propDecorators\", void 0, void 0, initializer);\n    addJSDocTypeAnnotation(prop, `!Object<string, ${DECORATOR_INVOCATION_JSDOC_TYPE}>`);\n    return prop;\n  }\n  return context => {\n    const referencedParameterTypes = loadIsReferencedAliasDeclarationPatch(context);\n    function entityNameToExpression(name) {\n      const symbol = typeChecker.getSymbolAtLocation(name);\n      if (!symbol || !symbolIsRuntimeValue(typeChecker, symbol) || !symbol.declarations || symbol.declarations.length === 0) {\n        return void 0;\n      }\n      if (ts.isQualifiedName(name)) {\n        const containerExpr = entityNameToExpression(name.left);\n        if (containerExpr === void 0) {\n          return void 0;\n        }\n        return ts.factory.createPropertyAccessExpression(containerExpr, name.right);\n      }\n      const decl = symbol.declarations[0];\n      if (isAliasImportDeclaration(decl)) {\n        referencedParameterTypes.add(decl);\n        if (decl.name !== void 0) {\n          return ts.setOriginalNode(ts.factory.createIdentifier(decl.name.text), decl.name);\n        }\n      }\n      return ts.setOriginalNode(ts.factory.createIdentifier(name.text), name);\n    }\n    function transformClassElement(element) {\n      element = ts.visitEachChild(element, decoratorDownlevelVisitor, context);\n      const decoratorsToKeep = [];\n      const toLower = [];\n      const decorators = host.getDecoratorsOfDeclaration(element) || [];\n      for (const decorator of decorators) {\n        const decoratorNode = decorator.node;\n        if (!isAngularDecorator(decorator, isCore)) {\n          decoratorsToKeep.push(decoratorNode);\n          continue;\n        }\n        toLower.push(decoratorNode);\n      }\n      if (!toLower.length) return [void 0, element, []];\n      if (!element.name || !ts.isIdentifier(element.name)) {\n        diagnostics.push({\n          file: element.getSourceFile(),\n          start: element.getStart(),\n          length: element.getEnd() - element.getStart(),\n          messageText: `Cannot process decorators for class element with non-analyzable name.`,\n          category: ts.DiagnosticCategory.Error,\n          code: 0\n        });\n        return [void 0, element, []];\n      }\n      const elementModifiers = ts.canHaveModifiers(element) ? ts.getModifiers(element) : void 0;\n      let modifiers;\n      if (decoratorsToKeep.length || (elementModifiers == null ? void 0 : elementModifiers.length)) {\n        modifiers = ts.setTextRange(ts.factory.createNodeArray([...decoratorsToKeep, ...(elementModifiers || [])]), element.modifiers);\n      }\n      return [element.name.text, cloneClassElementWithModifiers(element, modifiers), toLower];\n    }\n    function transformConstructor(ctor) {\n      ctor = ts.visitEachChild(ctor, decoratorDownlevelVisitor, context);\n      const newParameters = [];\n      const oldParameters = ctor.parameters;\n      const parametersInfo = [];\n      for (const param of oldParameters) {\n        const decoratorsToKeep = [];\n        const paramInfo = {\n          decorators: [],\n          type: null\n        };\n        const decorators = host.getDecoratorsOfDeclaration(param) || [];\n        for (const decorator of decorators) {\n          const decoratorNode = decorator.node;\n          if (!isAngularDecorator(decorator, isCore)) {\n            decoratorsToKeep.push(decoratorNode);\n            continue;\n          }\n          paramInfo.decorators.push(decoratorNode);\n        }\n        if (param.type) {\n          paramInfo.type = param.type;\n        }\n        parametersInfo.push(paramInfo);\n        let modifiers;\n        const paramModifiers = ts.getModifiers(param);\n        if (decoratorsToKeep.length || (paramModifiers == null ? void 0 : paramModifiers.length)) {\n          modifiers = [...decoratorsToKeep, ...(paramModifiers || [])];\n        }\n        const newParam = ts.factory.updateParameterDeclaration(param, modifiers, param.dotDotDotToken, param.name, param.questionToken, param.type, param.initializer);\n        newParameters.push(newParam);\n      }\n      const updated = ts.factory.updateConstructorDeclaration(ctor, ts.getModifiers(ctor), newParameters, ctor.body);\n      return [updated, parametersInfo];\n    }\n    function transformClassDeclaration(classDecl) {\n      const newMembers = [];\n      const decoratedProperties = /* @__PURE__ */new Map();\n      let classParameters = null;\n      for (const member of classDecl.members) {\n        switch (member.kind) {\n          case ts.SyntaxKind.PropertyDeclaration:\n          case ts.SyntaxKind.GetAccessor:\n          case ts.SyntaxKind.SetAccessor:\n          case ts.SyntaxKind.MethodDeclaration:\n            {\n              const [name, newMember, decorators] = transformClassElement(member);\n              newMembers.push(newMember);\n              if (name) decoratedProperties.set(name, decorators);\n              continue;\n            }\n          case ts.SyntaxKind.Constructor:\n            {\n              const ctor = member;\n              if (!ctor.body) break;\n              const [newMember, parametersInfo] = transformConstructor(member);\n              classParameters = parametersInfo;\n              newMembers.push(newMember);\n              continue;\n            }\n          default:\n            break;\n        }\n        newMembers.push(ts.visitEachChild(member, decoratorDownlevelVisitor, context));\n      }\n      const possibleAngularDecorators = host.getDecoratorsOfDeclaration(classDecl) || [];\n      const hasAngularDecorator = possibleAngularDecorators.some(d => isAngularDecorator(d, isCore));\n      if (classParameters) {\n        if (hasAngularDecorator || classParameters.some(p => !!p.decorators.length)) {\n          newMembers.push(createCtorParametersClassProperty(diagnostics, entityNameToExpression, classParameters, isClosureCompilerEnabled));\n        }\n      }\n      if (decoratedProperties.size) {\n        newMembers.push(createPropDecoratorsClassProperty(diagnostics, decoratedProperties));\n      }\n      const members = ts.setTextRange(ts.factory.createNodeArray(newMembers, classDecl.members.hasTrailingComma), classDecl.members);\n      return ts.factory.updateClassDeclaration(classDecl, classDecl.modifiers, classDecl.name, classDecl.typeParameters, classDecl.heritageClauses, members);\n    }\n    function decoratorDownlevelVisitor(node) {\n      if (ts.isClassDeclaration(node)) {\n        return transformClassDeclaration(node);\n      }\n      return ts.visitEachChild(node, decoratorDownlevelVisitor, context);\n    }\n    return sf => {\n      return ts.visitEachChild(sf, decoratorDownlevelVisitor, context);\n    };\n  };\n}\nfunction cloneClassElementWithModifiers(node, modifiers) {\n  let clone;\n  if (ts.isMethodDeclaration(node)) {\n    clone = ts.factory.createMethodDeclaration(modifiers, node.asteriskToken, node.name, node.questionToken, node.typeParameters, node.parameters, node.type, node.body);\n  } else if (ts.isPropertyDeclaration(node)) {\n    clone = ts.factory.createPropertyDeclaration(modifiers, node.name, node.questionToken, node.type, node.initializer);\n  } else if (ts.isGetAccessor(node)) {\n    clone = ts.factory.createGetAccessorDeclaration(modifiers, node.name, node.parameters, node.type, node.body);\n  } else if (ts.isSetAccessor(node)) {\n    clone = ts.factory.createSetAccessorDeclaration(modifiers, node.name, node.parameters, node.body);\n  } else {\n    throw new Error(`Unsupported decorated member with kind ${ts.SyntaxKind[node.kind]}`);\n  }\n  return ts.setOriginalNode(clone, node);\n}\n\n// bazel-out/darwin_arm64-fastbuild/bin/packages/compiler-cli/private/tooling.mjs\nvar GLOBAL_DEFS_FOR_TERSER = {\n  ngDevMode: false,\n  ngI18nClosureMode: false\n};\nvar GLOBAL_DEFS_FOR_TERSER_WITH_AOT = {\n  ...GLOBAL_DEFS_FOR_TERSER,\n  ngJitMode: false\n};\nfunction constructorParametersDownlevelTransform(program) {\n  const typeChecker = program.getTypeChecker();\n  const reflectionHost = new TypeScriptReflectionHost(typeChecker);\n  return getDownlevelDecoratorsTransform(typeChecker, reflectionHost, [], false, false);\n}\nexport { GLOBAL_DEFS_FOR_TERSER, GLOBAL_DEFS_FOR_TERSER_WITH_AOT, constructorParametersDownlevelTransform };\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */","map":{"version":3,"names":["createRequire","__cjsCompatRequire","require","import","meta","url","TypeScriptReflectionHost","isAliasImportDeclaration","loadIsReferencedAliasDeclarationPatch","ts","isAngularDecorator","decorator","isCore","from","DECORATOR_INVOCATION_JSDOC_TYPE","extractMetadataFromSingleDecorator","diagnostics","metadataProperties","expr","expression","kind","SyntaxKind","Identifier","push","factory","createPropertyAssignment","CallExpression","call","arguments","length","args","arg","argsArrayLiteral","createArrayLiteralExpression","createNodeArray","file","getSourceFile","start","getStart","getEnd","messageText","category","DiagnosticCategory","Error","code","createObjectLiteralExpression","createCtorParametersClassProperty","entityNameToExpression","ctorParameters","isClosureCompilerEnabled","params","ctorParam","type","decorators","createNull","paramType","typeReferenceToExpression","members","createIdentifier","deco","initializer","createArrowFunction","createToken","EqualsGreaterThanToken","ctorProp","createPropertyDeclaration","StaticKeyword","setSyntheticLeadingComments","MultiLineCommentTrivia","text","join","pos","end","hasTrailingNewLine","node","isLiteralTypeNode","literal","FunctionType","ConstructorType","ArrayType","TupleType","TypePredicate","TrueKeyword","FalseKeyword","BooleanKeyword","StringLiteral","StringKeyword","ObjectKeyword","NumberKeyword","NumericLiteral","TypeReference","typeRef","typeName","UnionType","childTypeNodes","types","filter","t","NullKeyword","symbolIsRuntimeValue","typeChecker","symbol","flags","SymbolFlags","Alias","getAliasedSymbol","Value","ConstEnumExcludes","getDownlevelDecoratorsTransform","host","addJSDocTypeAnnotation","jsdocType","createPropDecoratorsClassProperty","diagnostics2","properties","entries","name","map","prop","context","referencedParameterTypes","getSymbolAtLocation","declarations","isQualifiedName","containerExpr","left","createPropertyAccessExpression","right","decl","add","setOriginalNode","transformClassElement","element","visitEachChild","decoratorDownlevelVisitor","decoratorsToKeep","toLower","getDecoratorsOfDeclaration","decoratorNode","isIdentifier","elementModifiers","canHaveModifiers","getModifiers","modifiers","setTextRange","cloneClassElementWithModifiers","transformConstructor","ctor","newParameters","oldParameters","parameters","parametersInfo","param","paramInfo","paramModifiers","newParam","updateParameterDeclaration","dotDotDotToken","questionToken","updated","updateConstructorDeclaration","body","transformClassDeclaration","classDecl","newMembers","decoratedProperties","Map","classParameters","member","PropertyDeclaration","GetAccessor","SetAccessor","MethodDeclaration","newMember","set","Constructor","possibleAngularDecorators","hasAngularDecorator","some","d","p","size","hasTrailingComma","updateClassDeclaration","typeParameters","heritageClauses","isClassDeclaration","sf","clone","isMethodDeclaration","createMethodDeclaration","asteriskToken","isPropertyDeclaration","isGetAccessor","createGetAccessorDeclaration","isSetAccessor","createSetAccessorDeclaration","GLOBAL_DEFS_FOR_TERSER","ngDevMode","ngI18nClosureMode","GLOBAL_DEFS_FOR_TERSER_WITH_AOT","ngJitMode","constructorParametersDownlevelTransform","program","getTypeChecker","reflectionHost"],"sources":["C:/Users/user/Desktop/SpringBootProject/src/main/resources/my-app/node_modules/@angular/compiler-cli/bundles/chunk-ONCDPGC3.js"],"sourcesContent":["\n      import {createRequire as __cjsCompatRequire} from 'module';\n      const require = __cjsCompatRequire(import.meta.url);\n    \nimport {\n  TypeScriptReflectionHost\n} from \"./chunk-OIJPCKRW.js\";\nimport {\n  isAliasImportDeclaration,\n  loadIsReferencedAliasDeclarationPatch\n} from \"./chunk-KPIJL3UY.js\";\n\n// bazel-out/darwin_arm64-fastbuild/bin/packages/compiler-cli/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.mjs\nimport ts from \"typescript\";\nfunction isAngularDecorator(decorator, isCore) {\n  return isCore || decorator.import !== null && decorator.import.from === \"@angular/core\";\n}\nvar DECORATOR_INVOCATION_JSDOC_TYPE = \"!Array<{type: !Function, args: (undefined|!Array<?>)}>\";\nfunction extractMetadataFromSingleDecorator(decorator, diagnostics) {\n  const metadataProperties = [];\n  const expr = decorator.expression;\n  switch (expr.kind) {\n    case ts.SyntaxKind.Identifier:\n      metadataProperties.push(ts.factory.createPropertyAssignment(\"type\", expr));\n      break;\n    case ts.SyntaxKind.CallExpression:\n      const call = expr;\n      metadataProperties.push(ts.factory.createPropertyAssignment(\"type\", call.expression));\n      if (call.arguments.length) {\n        const args = [];\n        for (const arg of call.arguments) {\n          args.push(arg);\n        }\n        const argsArrayLiteral = ts.factory.createArrayLiteralExpression(ts.factory.createNodeArray(args, true));\n        metadataProperties.push(ts.factory.createPropertyAssignment(\"args\", argsArrayLiteral));\n      }\n      break;\n    default:\n      diagnostics.push({\n        file: decorator.getSourceFile(),\n        start: decorator.getStart(),\n        length: decorator.getEnd() - decorator.getStart(),\n        messageText: `${ts.SyntaxKind[decorator.kind]} not implemented in gathering decorator metadata.`,\n        category: ts.DiagnosticCategory.Error,\n        code: 0\n      });\n      break;\n  }\n  return ts.factory.createObjectLiteralExpression(metadataProperties);\n}\nfunction createCtorParametersClassProperty(diagnostics, entityNameToExpression, ctorParameters, isClosureCompilerEnabled) {\n  const params = [];\n  for (const ctorParam of ctorParameters) {\n    if (!ctorParam.type && ctorParam.decorators.length === 0) {\n      params.push(ts.factory.createNull());\n      continue;\n    }\n    const paramType = ctorParam.type ? typeReferenceToExpression(entityNameToExpression, ctorParam.type) : void 0;\n    const members = [ts.factory.createPropertyAssignment(\"type\", paramType || ts.factory.createIdentifier(\"undefined\"))];\n    const decorators = [];\n    for (const deco of ctorParam.decorators) {\n      decorators.push(extractMetadataFromSingleDecorator(deco, diagnostics));\n    }\n    if (decorators.length) {\n      members.push(ts.factory.createPropertyAssignment(\"decorators\", ts.factory.createArrayLiteralExpression(decorators)));\n    }\n    params.push(ts.factory.createObjectLiteralExpression(members));\n  }\n  const initializer = ts.factory.createArrowFunction(void 0, void 0, [], void 0, ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken), ts.factory.createArrayLiteralExpression(params, true));\n  const ctorProp = ts.factory.createPropertyDeclaration([ts.factory.createToken(ts.SyntaxKind.StaticKeyword)], \"ctorParameters\", void 0, void 0, initializer);\n  if (isClosureCompilerEnabled) {\n    ts.setSyntheticLeadingComments(ctorProp, [\n      {\n        kind: ts.SyntaxKind.MultiLineCommentTrivia,\n        text: [\n          `*`,\n          ` * @type {function(): !Array<(null|{`,\n          ` *   type: ?,`,\n          ` *   decorators: (undefined|${DECORATOR_INVOCATION_JSDOC_TYPE}),`,\n          ` * })>}`,\n          ` * @nocollapse`,\n          ` `\n        ].join(\"\\n\"),\n        pos: -1,\n        end: -1,\n        hasTrailingNewLine: true\n      }\n    ]);\n  }\n  return ctorProp;\n}\nfunction typeReferenceToExpression(entityNameToExpression, node) {\n  let kind = node.kind;\n  if (ts.isLiteralTypeNode(node)) {\n    kind = node.literal.kind;\n  }\n  switch (kind) {\n    case ts.SyntaxKind.FunctionType:\n    case ts.SyntaxKind.ConstructorType:\n      return ts.factory.createIdentifier(\"Function\");\n    case ts.SyntaxKind.ArrayType:\n    case ts.SyntaxKind.TupleType:\n      return ts.factory.createIdentifier(\"Array\");\n    case ts.SyntaxKind.TypePredicate:\n    case ts.SyntaxKind.TrueKeyword:\n    case ts.SyntaxKind.FalseKeyword:\n    case ts.SyntaxKind.BooleanKeyword:\n      return ts.factory.createIdentifier(\"Boolean\");\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.StringKeyword:\n      return ts.factory.createIdentifier(\"String\");\n    case ts.SyntaxKind.ObjectKeyword:\n      return ts.factory.createIdentifier(\"Object\");\n    case ts.SyntaxKind.NumberKeyword:\n    case ts.SyntaxKind.NumericLiteral:\n      return ts.factory.createIdentifier(\"Number\");\n    case ts.SyntaxKind.TypeReference:\n      const typeRef = node;\n      return entityNameToExpression(typeRef.typeName);\n    case ts.SyntaxKind.UnionType:\n      const childTypeNodes = node.types.filter((t) => !(ts.isLiteralTypeNode(t) && t.literal.kind === ts.SyntaxKind.NullKeyword));\n      return childTypeNodes.length === 1 ? typeReferenceToExpression(entityNameToExpression, childTypeNodes[0]) : void 0;\n    default:\n      return void 0;\n  }\n}\nfunction symbolIsRuntimeValue(typeChecker, symbol) {\n  if (symbol.flags & ts.SymbolFlags.Alias) {\n    symbol = typeChecker.getAliasedSymbol(symbol);\n  }\n  return (symbol.flags & ts.SymbolFlags.Value & ts.SymbolFlags.ConstEnumExcludes) !== 0;\n}\nfunction getDownlevelDecoratorsTransform(typeChecker, host, diagnostics, isCore, isClosureCompilerEnabled) {\n  function addJSDocTypeAnnotation(node, jsdocType) {\n    if (!isClosureCompilerEnabled) {\n      return;\n    }\n    ts.setSyntheticLeadingComments(node, [\n      {\n        kind: ts.SyntaxKind.MultiLineCommentTrivia,\n        text: `* @type {${jsdocType}} `,\n        pos: -1,\n        end: -1,\n        hasTrailingNewLine: true\n      }\n    ]);\n  }\n  function createPropDecoratorsClassProperty(diagnostics2, properties) {\n    const entries = [];\n    for (const [name, decorators] of properties.entries()) {\n      entries.push(ts.factory.createPropertyAssignment(name, ts.factory.createArrayLiteralExpression(decorators.map((deco) => extractMetadataFromSingleDecorator(deco, diagnostics2)))));\n    }\n    const initializer = ts.factory.createObjectLiteralExpression(entries, true);\n    const prop = ts.factory.createPropertyDeclaration([ts.factory.createToken(ts.SyntaxKind.StaticKeyword)], \"propDecorators\", void 0, void 0, initializer);\n    addJSDocTypeAnnotation(prop, `!Object<string, ${DECORATOR_INVOCATION_JSDOC_TYPE}>`);\n    return prop;\n  }\n  return (context) => {\n    const referencedParameterTypes = loadIsReferencedAliasDeclarationPatch(context);\n    function entityNameToExpression(name) {\n      const symbol = typeChecker.getSymbolAtLocation(name);\n      if (!symbol || !symbolIsRuntimeValue(typeChecker, symbol) || !symbol.declarations || symbol.declarations.length === 0) {\n        return void 0;\n      }\n      if (ts.isQualifiedName(name)) {\n        const containerExpr = entityNameToExpression(name.left);\n        if (containerExpr === void 0) {\n          return void 0;\n        }\n        return ts.factory.createPropertyAccessExpression(containerExpr, name.right);\n      }\n      const decl = symbol.declarations[0];\n      if (isAliasImportDeclaration(decl)) {\n        referencedParameterTypes.add(decl);\n        if (decl.name !== void 0) {\n          return ts.setOriginalNode(ts.factory.createIdentifier(decl.name.text), decl.name);\n        }\n      }\n      return ts.setOriginalNode(ts.factory.createIdentifier(name.text), name);\n    }\n    function transformClassElement(element) {\n      element = ts.visitEachChild(element, decoratorDownlevelVisitor, context);\n      const decoratorsToKeep = [];\n      const toLower = [];\n      const decorators = host.getDecoratorsOfDeclaration(element) || [];\n      for (const decorator of decorators) {\n        const decoratorNode = decorator.node;\n        if (!isAngularDecorator(decorator, isCore)) {\n          decoratorsToKeep.push(decoratorNode);\n          continue;\n        }\n        toLower.push(decoratorNode);\n      }\n      if (!toLower.length)\n        return [void 0, element, []];\n      if (!element.name || !ts.isIdentifier(element.name)) {\n        diagnostics.push({\n          file: element.getSourceFile(),\n          start: element.getStart(),\n          length: element.getEnd() - element.getStart(),\n          messageText: `Cannot process decorators for class element with non-analyzable name.`,\n          category: ts.DiagnosticCategory.Error,\n          code: 0\n        });\n        return [void 0, element, []];\n      }\n      const elementModifiers = ts.canHaveModifiers(element) ? ts.getModifiers(element) : void 0;\n      let modifiers;\n      if (decoratorsToKeep.length || (elementModifiers == null ? void 0 : elementModifiers.length)) {\n        modifiers = ts.setTextRange(ts.factory.createNodeArray([...decoratorsToKeep, ...elementModifiers || []]), element.modifiers);\n      }\n      return [element.name.text, cloneClassElementWithModifiers(element, modifiers), toLower];\n    }\n    function transformConstructor(ctor) {\n      ctor = ts.visitEachChild(ctor, decoratorDownlevelVisitor, context);\n      const newParameters = [];\n      const oldParameters = ctor.parameters;\n      const parametersInfo = [];\n      for (const param of oldParameters) {\n        const decoratorsToKeep = [];\n        const paramInfo = { decorators: [], type: null };\n        const decorators = host.getDecoratorsOfDeclaration(param) || [];\n        for (const decorator of decorators) {\n          const decoratorNode = decorator.node;\n          if (!isAngularDecorator(decorator, isCore)) {\n            decoratorsToKeep.push(decoratorNode);\n            continue;\n          }\n          paramInfo.decorators.push(decoratorNode);\n        }\n        if (param.type) {\n          paramInfo.type = param.type;\n        }\n        parametersInfo.push(paramInfo);\n        let modifiers;\n        const paramModifiers = ts.getModifiers(param);\n        if (decoratorsToKeep.length || (paramModifiers == null ? void 0 : paramModifiers.length)) {\n          modifiers = [...decoratorsToKeep, ...paramModifiers || []];\n        }\n        const newParam = ts.factory.updateParameterDeclaration(param, modifiers, param.dotDotDotToken, param.name, param.questionToken, param.type, param.initializer);\n        newParameters.push(newParam);\n      }\n      const updated = ts.factory.updateConstructorDeclaration(ctor, ts.getModifiers(ctor), newParameters, ctor.body);\n      return [updated, parametersInfo];\n    }\n    function transformClassDeclaration(classDecl) {\n      const newMembers = [];\n      const decoratedProperties = /* @__PURE__ */ new Map();\n      let classParameters = null;\n      for (const member of classDecl.members) {\n        switch (member.kind) {\n          case ts.SyntaxKind.PropertyDeclaration:\n          case ts.SyntaxKind.GetAccessor:\n          case ts.SyntaxKind.SetAccessor:\n          case ts.SyntaxKind.MethodDeclaration: {\n            const [name, newMember, decorators] = transformClassElement(member);\n            newMembers.push(newMember);\n            if (name)\n              decoratedProperties.set(name, decorators);\n            continue;\n          }\n          case ts.SyntaxKind.Constructor: {\n            const ctor = member;\n            if (!ctor.body)\n              break;\n            const [newMember, parametersInfo] = transformConstructor(member);\n            classParameters = parametersInfo;\n            newMembers.push(newMember);\n            continue;\n          }\n          default:\n            break;\n        }\n        newMembers.push(ts.visitEachChild(member, decoratorDownlevelVisitor, context));\n      }\n      const possibleAngularDecorators = host.getDecoratorsOfDeclaration(classDecl) || [];\n      const hasAngularDecorator = possibleAngularDecorators.some((d) => isAngularDecorator(d, isCore));\n      if (classParameters) {\n        if (hasAngularDecorator || classParameters.some((p) => !!p.decorators.length)) {\n          newMembers.push(createCtorParametersClassProperty(diagnostics, entityNameToExpression, classParameters, isClosureCompilerEnabled));\n        }\n      }\n      if (decoratedProperties.size) {\n        newMembers.push(createPropDecoratorsClassProperty(diagnostics, decoratedProperties));\n      }\n      const members = ts.setTextRange(ts.factory.createNodeArray(newMembers, classDecl.members.hasTrailingComma), classDecl.members);\n      return ts.factory.updateClassDeclaration(classDecl, classDecl.modifiers, classDecl.name, classDecl.typeParameters, classDecl.heritageClauses, members);\n    }\n    function decoratorDownlevelVisitor(node) {\n      if (ts.isClassDeclaration(node)) {\n        return transformClassDeclaration(node);\n      }\n      return ts.visitEachChild(node, decoratorDownlevelVisitor, context);\n    }\n    return (sf) => {\n      return ts.visitEachChild(sf, decoratorDownlevelVisitor, context);\n    };\n  };\n}\nfunction cloneClassElementWithModifiers(node, modifiers) {\n  let clone;\n  if (ts.isMethodDeclaration(node)) {\n    clone = ts.factory.createMethodDeclaration(modifiers, node.asteriskToken, node.name, node.questionToken, node.typeParameters, node.parameters, node.type, node.body);\n  } else if (ts.isPropertyDeclaration(node)) {\n    clone = ts.factory.createPropertyDeclaration(modifiers, node.name, node.questionToken, node.type, node.initializer);\n  } else if (ts.isGetAccessor(node)) {\n    clone = ts.factory.createGetAccessorDeclaration(modifiers, node.name, node.parameters, node.type, node.body);\n  } else if (ts.isSetAccessor(node)) {\n    clone = ts.factory.createSetAccessorDeclaration(modifiers, node.name, node.parameters, node.body);\n  } else {\n    throw new Error(`Unsupported decorated member with kind ${ts.SyntaxKind[node.kind]}`);\n  }\n  return ts.setOriginalNode(clone, node);\n}\n\n// bazel-out/darwin_arm64-fastbuild/bin/packages/compiler-cli/private/tooling.mjs\nvar GLOBAL_DEFS_FOR_TERSER = {\n  ngDevMode: false,\n  ngI18nClosureMode: false\n};\nvar GLOBAL_DEFS_FOR_TERSER_WITH_AOT = {\n  ...GLOBAL_DEFS_FOR_TERSER,\n  ngJitMode: false\n};\nfunction constructorParametersDownlevelTransform(program) {\n  const typeChecker = program.getTypeChecker();\n  const reflectionHost = new TypeScriptReflectionHost(typeChecker);\n  return getDownlevelDecoratorsTransform(\n    typeChecker,\n    reflectionHost,\n    [],\n    false,\n    false\n  );\n}\n\nexport {\n  GLOBAL_DEFS_FOR_TERSER,\n  GLOBAL_DEFS_FOR_TERSER_WITH_AOT,\n  constructorParametersDownlevelTransform\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}