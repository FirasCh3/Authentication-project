{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nexport let LoginComponent = class LoginComponent {\n  constructor(Request, router) {\n    this.Request = Request;\n    this.router = router;\n    this.group = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required, Validators.minLength(8)])\n    }, [], this.restricted.bind(this));\n  }\n  UserDoesNotExist(UserData, UserInput) {\n    let i = 0;\n    let UserExistenceTest = false;\n    while (i < UserData.length && UserExistenceTest == false) {\n      if (UserInput.email == UserData[i].email && UserInput.password == UserData[i].password) {\n        UserExistenceTest = true;\n      } else {\n        i++;\n      }\n    }\n    return UserExistenceTest;\n  }\n  restricted(control) {\n    let UserData;\n    let UserInput = control.value;\n    this.Request.GetAllUsers().subscribe(data => {\n      UserData = data;\n    });\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (this.UserDoesNotExist(UserData, UserInput) == false) {\n          resolve({\n            error: false\n          });\n        } else {\n          resolve(null);\n        }\n      }, 1000);\n    });\n    return promise;\n  }\n  submit(info) {\n    this.Request.Login(info).subscribe(response => {\n      let token = response.token;\n      localStorage.setItem('token', token);\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","LoginComponent","constructor","Request","router","group","email","required","password","minLength","restricted","bind","UserDoesNotExist","UserData","UserInput","i","UserExistenceTest","length","control","value","GetAllUsers","subscribe","data","promise","Promise","resolve","reject","setTimeout","error","submit","info","Login","response","token","localStorage","setItem","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\user\\Desktop\\SpringBootProject\\src\\main\\resources\\my-app\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {httpRequests} from \"../http\";\nimport {AbstractControl, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Observable} from \"rxjs\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  constructor(private Request:httpRequests,private router:Router) {\n  }\n  group=new FormGroup({\n    email:new FormControl(null,[Validators.required,Validators.email]),\n    password:new FormControl(null,[Validators.required,Validators.minLength(8)])\n  },[],this.restricted.bind(this));\n  UserDoesNotExist(UserData:any,UserInput:any):boolean{\n    let i=0;\n    let UserExistenceTest:boolean=false;\n    while(i<UserData.length && UserExistenceTest==false){\n      if(UserInput.email==UserData[i].email && UserInput.password==UserData[i].password){\n        UserExistenceTest=true;\n      }else{\n        i++;\n      }\n    }\n    return UserExistenceTest;\n  }\n  restricted(control:AbstractControl):Promise<any>|Observable<any>{\n    let UserData:any;\n    let UserInput = control.value;\n    this.Request.GetAllUsers().subscribe((data)=>{\n      UserData=data;\n\n    })\n    let promise = new Promise((resolve, reject) => {\n\n      setTimeout(() => {\n        if(this.UserDoesNotExist(UserData,UserInput)==false){\n          resolve({error:false})\n        }else{\n          resolve(null);\n        }\n\n\n\n      }, 1000)\n    });\n    return promise;\n  }\n  submit(info:any){\n      this.Request.Login(info).subscribe((response)=>{\n        let token:any=response.token;\n        localStorage.setItem('token',token);\n      })\n\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAAyBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAS3E,WAAMC,cAAc,GAApB,MAAMA,cAAc;EACzBC,YAAoBC,OAAoB,EAASC,MAAa;IAA1C,KAAAD,OAAO,GAAPA,OAAO;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAEvD,KAAAC,KAAK,GAAC,IAAIN,SAAS,CAAC;MAClBO,KAAK,EAAC,IAAIR,WAAW,CAAC,IAAI,EAAC,CAACE,UAAU,CAACO,QAAQ,EAACP,UAAU,CAACM,KAAK,CAAC,CAAC;MAClEE,QAAQ,EAAC,IAAIV,WAAW,CAAC,IAAI,EAAC,CAACE,UAAU,CAACO,QAAQ,EAACP,UAAU,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC;KAC5E,EAAC,EAAE,EAAC,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAJhC;EAKAC,gBAAgBA,CAACC,QAAY,EAACC,SAAa;IACzC,IAAIC,CAAC,GAAC,CAAC;IACP,IAAIC,iBAAiB,GAAS,KAAK;IACnC,OAAMD,CAAC,GAACF,QAAQ,CAACI,MAAM,IAAID,iBAAiB,IAAE,KAAK,EAAC;MAClD,IAAGF,SAAS,CAACR,KAAK,IAAEO,QAAQ,CAACE,CAAC,CAAC,CAACT,KAAK,IAAIQ,SAAS,CAACN,QAAQ,IAAEK,QAAQ,CAACE,CAAC,CAAC,CAACP,QAAQ,EAAC;QAChFQ,iBAAiB,GAAC,IAAI;OACvB,MAAI;QACHD,CAAC,EAAE;;;IAGP,OAAOC,iBAAiB;EAC1B;EACAN,UAAUA,CAACQ,OAAuB;IAChC,IAAIL,QAAY;IAChB,IAAIC,SAAS,GAAGI,OAAO,CAACC,KAAK;IAC7B,IAAI,CAAChB,OAAO,CAACiB,WAAW,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAG;MAC3CT,QAAQ,GAACS,IAAI;IAEf,CAAC,CAAC;IACF,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAE5CC,UAAU,CAAC,MAAK;QACd,IAAG,IAAI,CAACf,gBAAgB,CAACC,QAAQ,EAACC,SAAS,CAAC,IAAE,KAAK,EAAC;UAClDW,OAAO,CAAC;YAACG,KAAK,EAAC;UAAK,CAAC,CAAC;SACvB,MAAI;UACHH,OAAO,CAAC,IAAI,CAAC;;MAKjB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;IACF,OAAOF,OAAO;EAChB;EACAM,MAAMA,CAACC,IAAQ;IACX,IAAI,CAAC3B,OAAO,CAAC4B,KAAK,CAACD,IAAI,CAAC,CAACT,SAAS,CAAEW,QAAQ,IAAG;MAC7C,IAAIC,KAAK,GAAKD,QAAQ,CAACC,KAAK;MAC5BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACF,KAAK,CAAC;IACrC,CAAC,CAAC;EAEN;CAED;AAjDYhC,cAAc,GAAAmC,UAAA,EAL1BvC,SAAS,CAAC;EACTwC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWtC,cAAc,CAiD1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}